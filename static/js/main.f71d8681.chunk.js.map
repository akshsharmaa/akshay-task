{"version":3,"sources":["Api/index.js","Components/Suggestions/index.jsx","Components/AutoCompleteInputBox/index.jsx","utils.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomBool","n","maxRandomCoeff","Math","floor","random","getSuggestions","text","post","results","push","Promise","resolve","reject","randomTimeout","setTimeout","Suggestions","suggestions","suggestionSelected","selectedIndex","hideSuggestions","className","onClick","map","suggestion","index","KEYBOARD_KEYS","AutoCompleteInputBox","props","getDataFromServer","textToSearch","a","response","setState","console","error","onInputChanged","event","previousText","state","inputText","split","slice","target","value","debouncedInputChange","words","splice","length","newInputText","join","concat","inputBoxRef","current","focus","onKeyDown","e","which","nextIndex","React","createRef","timer","fn","timeInMs","clearTimeout","bind","this","arguments","debounce","type","placeholder","ref","onChange","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f71d8681.chunk.js","sourcesContent":["// Using mock code, as provided\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Suggestions.css\";\n\n// The Dropdown Box\nconst Suggestions = ({\n  suggestions,\n  suggestionSelected,\n  selectedIndex,\n  hideSuggestions,\n}) => (\n  <>\n    <div className=\"outclick-div\" onClick={hideSuggestions} />\n    <ul className=\"dropdown-menu show\">\n      {suggestions.map((suggestion, index) => (\n        <li\n          key={suggestion}\n          className={`dropdown-item ${selectedIndex === index && \"highlight\"}`}\n          onClick={() => suggestionSelected(suggestion)}\n        >\n          {suggestion}\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nSuggestions.propTypes = {\n  suggestions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedIndex: PropTypes.number.isRequired,\n  hideSuggestions: PropTypes.func.isRequired,\n  suggestionSelected: PropTypes.func.isRequired,\n};\n\nexport default Suggestions;\n","import React from \"react\";\nimport getSuggestions from \"../../Api\";\nimport Suggestions from \"../Suggestions\";\nimport { debounce } from \"../../utils\";\n\nconst KEYBOARD_KEYS = {\n  ENTER: 13,\n  UP: 38,\n  DOWN: 40,\n};\n\nclass AutoCompleteInputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: \"\",\n      suggestions: [],\n      selectedIndex: 0,\n    };\n\n    // Creating the ref to input for the focus\n    this.inputBoxRef = React.createRef();\n    this.debouncedInputChange = debounce(this.getDataFromServer, 200);\n  }\n\n  getDataFromServer = async textToSearch => {\n    try {\n      const response = await getSuggestions(textToSearch);\n      this.setState({ suggestions: response, selectedIndex: 0 });\n    } catch (error) {\n      console.error(\"Got Error In Fetching Suggestion\", error);\n    }\n  };\n\n  onInputChanged = event => {\n    const previousText = this.state.inputText.split(\" \").slice(-1)[0];\n    const textToSearch = event.target.value.split(\" \").slice(-1)[0];\n\n    this.setState({ inputText: event.target.value });\n\n    if (!!textToSearch && previousText !== textToSearch) {\n      this.debouncedInputChange(textToSearch);\n    } else {\n      this.hideSuggestions();\n    }\n  };\n\n  // Maintain all selected text by appending to current state\n  suggestionSelected = suggestion => {\n    const words = this.state.inputText.split(\" \");\n    words.splice(words.length - 1, 1, suggestion);\n    const newInputText = words.join(\" \").concat(\" \");\n    this.setState({ inputText: newInputText });\n    this.hideSuggestions();\n    this.inputBoxRef.current.focus();\n  };\n\n  hideSuggestions = () => {\n    this.setState({ suggestions: [], selectedIndex: 0 });\n  };\n\n  onKeyDown = e => {\n    const { suggestions, selectedIndex } = this.state;\n    if (suggestions.length !== 0) {\n      switch (e.which) {\n        case KEYBOARD_KEYS.UP: {\n          const nextIndex =\n            selectedIndex === 0 ? suggestions.length - 1 : selectedIndex - 1;\n          this.setState({ selectedIndex: nextIndex });\n          return;\n        }\n        case KEYBOARD_KEYS.DOWN: {\n          const nextIndex =\n            selectedIndex === suggestions.length - 1 ? 0 : selectedIndex + 1;\n          this.setState({ selectedIndex: nextIndex });\n          return;\n        }\n        case KEYBOARD_KEYS.ENTER: {\n          this.suggestionSelected(suggestions[selectedIndex]);\n          return;\n        }\n        default: {\n          return;\n        }\n      }\n    }\n  };\n\n  render() {\n    const { inputText, suggestions, selectedIndex } = this.state;\n\n    return (\n      <div className=\"input-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search\"\n          value={inputText}\n          ref={this.inputBoxRef}\n          onChange={this.onInputChanged}\n          onKeyDown={this.onKeyDown}\n        />\n        {suggestions.length > 0 && (\n          <Suggestions\n            suggestions={suggestions}\n            selectedIndex={selectedIndex}\n            hideSuggestions={this.hideSuggestions}\n            suggestionSelected={this.suggestionSelected}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AutoCompleteInputBox;\n","export const debounce = (fn = () => false, timeInMs = 200) => {\n  let timer;\n  return function () {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(fn.bind(this, ...arguments), timeInMs)\n  }\n} \n","import './App.css';\nimport AutoCompleteInputBox from './Components/AutoCompleteInputBox';\n\nfunction App() {\n  return (\n    <AutoCompleteInputBox />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}